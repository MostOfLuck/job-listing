/* eslint-disable no-undef */
import express from 'express';
import { Webhook } from 'svix';
import dotenv from 'dotenv';
import {Filter} from "bad-words";
import cors from 'cors';
import { PrismaClient } from '@prisma/client';
import fetch from 'node-fetch';
import paymentRoutes from './routes/payments.js';
import { checkLowRankedJobs } from './cron-jobs.js';
import { cancelAutoRenewal } from './controllers/payments.js';
import stringSimilarity from "string-similarity";
import badWordsList from './utils/badWordsList.js';
import './cron-jobs.js';
import { sendUpdatedJobListToTelegram } from './utils/telegram.js';

dotenv.config();

const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json({
  verify: (req, res, buf) => { req.rawBody = buf.toString(); }
}));

const filter = new Filter()

app.use('/api/payments', paymentRoutes);

const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET;
const CLERK_SECRET_KEY = process.env.CLERK_SECRET_KEY;

if (!WEBHOOK_SECRET) {
  console.error('‚ùå Missing Clerk Webhook Secret!');
  process.exit(1);
}

if (!CLERK_SECRET_KEY) {
  console.error('‚ùå Missing Clerk API Secret Key!');
  process.exit(1);
}

app.post('/api/payments/cancel-auto-renewal', cancelAutoRenewal);

// –í–µ–±—Ö—É–∫ –¥–ª—è Clerk
app.post('/webhook/clerk', async (req, res) => {
  const svix_id = req.headers['svix-id'];
  const svix_timestamp = req.headers['svix-timestamp'];
  const svix_signature = req.headers['svix-signature'];

  if (!svix_id || !svix_timestamp || !svix_signature) {
    return res.status(400).json({ error: 'Missing Svix headers' });
  }

  const body = req.rawBody;

  try {
    const wh = new Webhook(WEBHOOK_SECRET);
    const evt = wh.verify(body, {
      'svix-id': svix_id,
      'svix-timestamp': svix_timestamp,
      'svix-signature': svix_signature,
    });

    const userId = evt.data.id;

    if (evt.type === 'user.created' || evt.type === 'user.updated') {
      const email_addresses = evt.data.email_addresses;
      const first_name = evt.data.first_name;
      const last_name = evt.data.last_name;
      const image_url = evt.data.image_url;

      await prisma.user.upsert({
        where: { clerkUserId: userId },
        update: {
          email: email_addresses[0].email_address,
          firstName: first_name || null,
          lastName: last_name || null,
          imageUrl: image_url || null,
        },
        create: {
          clerkUserId: userId,
          email: email_addresses[0].email_address,
          firstName: first_name || null,
          lastName: last_name || null,
          imageUrl: image_url || null,
        },
      });
    }

    if (evt.type === 'user.deleted') {
      await prisma.user.delete({
        where: { clerkUserId: userId },
      });
    }

    res.status(200).json({ success: true });
  } catch (error) {
    res.status(400).json({ error: 'Webhook verification failed' });
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/sync-user', async (req, res) => {
  const { clerkUserId } = req.body;

  if (!clerkUserId) {
    return res.status(400).json({ error: 'Missing Clerk user ID' });
  }

  try {
    let user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user) {
      const response = await fetch(`https://api.clerk.com/v1/users/${clerkUserId}`, {
        headers: {
          'Authorization': `Bearer ${CLERK_SECRET_KEY}`,
          'Content-Type': 'application/json'
        }
      });

      const clerkUser = await response.json();

      user = await prisma.user.create({
        data: {
          clerkUserId: clerkUser.id,
          email: clerkUser.email_addresses[0]?.email_address || null,
          firstName: clerkUser.first_name || null,
          lastName: clerkUser.last_name || null,
          imageUrl: clerkUser.image_url || null
        }
      });
    }

    res.status(200).json({ success: true, user });
  } catch (error) {
    res.status(500).json({ error: 'Failed to sync user' });
  }
});

// –ì–æ—Ä–æ–¥–∞
app.get('/api/cities', async (req, res) => {
  try {
    const cities = await prisma.city.findMany();
    res.status(200).json(cities);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤', details: error.message });
  }
});

// CRUD –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π

/// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–µ —Å–ª–æ–≤–∞
const containsBadWords = (text) => {
  if (!text) return false;
  
  const words = text.toLowerCase().split(/\s+/);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–∏–µ –º–∞—Ç—ã –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
  return words.some((word) => badWordsList.includes(word) || filter.isProfane(word));
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
const containsLinks = (text) => {
  if (!text) return false;
  const urlPattern = /(https?:\/\/|www\.)[^\s]+/gi;
  return urlPattern.test(text);
};

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const MAX_JOBS_PER_USER = 10;

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
app.post('/api/jobs', async (req, res) => {
  const { title, salary, cityId, phone, description, userId } = req.body;

  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', {
    title,
    salary,
    cityId,
    phone,
    description,
    userId,
  });

  let errors = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—ã
  if (containsBadWords(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");
  if (containsBadWords(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏
  if (containsLinks(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");
  if (containsLinks(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");

  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (errors.length > 0) {
    console.log("üö® –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", errors);
    return res.status(400).json({
      success: false,
      message: "‚ùó –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—à–∏–±–æ–∫:",
      errors
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º clerkUserId
  let existingUser;
  try {
    existingUser = await prisma.user.findUnique({
      where: { clerkUserId: userId },
      include: {
        jobs: {
          orderBy: { createdAt: 'desc' },
          take: 1, // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∞–∫–∞–Ω—Å–∏—é
        },
      },
    });
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', existingUser);

    if (!existingUser) {
      console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å clerkUserId "${userId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
      return res.status(400).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        details: `–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å clerkUserId "${userId}" –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`,
      });
    }

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏—é
const existingJobs = await prisma.job.findMany({
  where: { userId: existingUser.id },
  select: { title: true, description: true },
});

const isDuplicate = existingJobs.some(job =>
  stringSimilarity.compareTwoStrings(job.title, title) > 0.9 &&
  stringSimilarity.compareTwoStrings(job.description, description) > 0.9
);

if (isDuplicate) {
  return res.status(400).json({ error: "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ." });
}



    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const jobCount = await prisma.job.count({
      where: { userId: existingUser.id },
    });

    if (jobCount >= MAX_JOBS_PER_USER) {
      console.warn(`[Job Limit] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –≤ ${MAX_JOBS_PER_USER} –≤–∞–∫–∞–Ω—Å–∏–π.`);
      return res.status(400).json({
        error: `–í—ã —É–∂–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ ${MAX_JOBS_PER_USER} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.`,
      });
    }


        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if (existingUser.jobs.length > 0) {
          const lastJob = existingUser.jobs[0];
          const now = new Date();
          const lastJobTime = new Date(lastJob.createdAt);
          const timeDiff = (now - lastJobTime) / 1000; // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
          if (timeDiff < 180) { // 3 –º–∏–Ω—É—Ç—ã = 180 —Å–µ–∫—É–Ω–¥
            const timeLeft = 180 - timeDiff;
            const minutesLeft = Math.floor(timeLeft / 60);
            const secondsLeft = Math.floor(timeLeft % 60);
    
            console.warn(`[Rate Limit] –ü–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è 3 –º–∏–Ω—É—Ç. –û—Å—Ç–∞–ª–æ—Å—å ${minutesLeft}–º ${secondsLeft}—Å.`);
            return res.status(400).json({
              error: `–í—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${minutesLeft}–º ${secondsLeft}—Å.`,
            });
          }
        }   } catch (userError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
          return res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            details: userError.message,
          });
        }


  try {
    const job = await prisma.job.create({
      data: {
        title,
        salary,
        phone,
        description,
        city: { connect: { id: parseInt(cityId) } },
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ–ª–µ id, –∞ –Ω–µ clerkUserId
        user: { connect: { id: existingUser.id } },
      },
      include: {
        city: true,
        user: true,
      },
    });

    console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:', job);
    res.status(201).json(job);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error.message);
    console.error(error.stack);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è', details: error.message });
  }
});



// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
app.put('/api/jobs/:id', async (req, res) => {
  const { id } = req.params;
  const { title, salary, cityId, phone, description } = req.body;

  let errors = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—ã
  if (containsBadWords(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");
  if (containsBadWords(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏
  if (containsLinks(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");
  if (containsLinks(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");

  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (errors.length > 0) {
    console.log("üö® –û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", errors);
    return res.status(400).json({
      success: false,
      message: "‚ùó –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—à–∏–±–æ–∫:",
      errors
    });
  }

  try {
    // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const existingJob = await prisma.job.findUnique({
      where: { id: parseInt(id) },
      include: { user: true },
    });

    if (!existingJob) {
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    const updatedJob = await prisma.job.update({
      where: { id: parseInt(id) },
      data: {
        title,
        salary,
        phone,
        description,
        city: { connect: { id: parseInt(cityId) } },
      },
      include: { city: true, user: true },
    });

    // üî• –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    if (updatedJob.user.isPremium) {
      const userJobs = await prisma.job.findMany({
        where: { userId: updatedJob.user.id },
        include: { city: true },
      });

      await sendUpdatedJobListToTelegram(updatedJob.user, userJobs);
    }

    res.status(200).json(updatedJob);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è', details: error.message });
  }
});


// –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
app.delete('/api/jobs/:id', async (req, res) => {
  const { id } = req.params;

  try {
    // üîπ –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const job = await prisma.job.findUnique({
      where: { id: parseInt(id) },
      include: { user: true },
    });

    if (!job) {
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await prisma.job.delete({
      where: { id: parseInt(id) },
    });

    // üî• –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (job.user.isPremium) {
      const userJobs = await prisma.job.findMany({
        where: { userId: job.user.id },
        include: { city: true },
      });

      await sendUpdatedJobListToTelegram(job.user, userJobs);
    }

    res.status(200).json({ message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è', details: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
app.get('/api/jobs', async (req, res) => {
  try {
    const jobs = await prisma.job.findMany({
      include: {
        city: true,
        user: true,
      },
      orderBy: [
        {
          user: {
            isPremium: 'desc',  // Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã—à–µ –≤—Å–µ—Ö
          },
        },
        {
          boostedAt: 'desc',    // –ó–∞—Ç–µ–º –ø–æ boostedAt
        },
        {
          createdAt: 'desc',    // –ó–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        },
      ],
    });

    res.status(200).json(jobs);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π', details: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
app.get('/api/user-jobs/:clerkUserId', async (req, res) => {
  const { clerkUserId } = req.params;
  const { page = 1, limit = 5 } = req.query;

  const pageInt = parseInt(page);
  const limitInt = parseInt(limit);
  const skip = (pageInt - 1) * limitInt;

  try {
    const user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const jobs = await prisma.job.findMany({
      where: { userId: user.id },
      include: {
        city: true,
        user: true
      }, 
      skip,
      take: limitInt,
      orderBy: {
        createdAt: 'desc',
      },
    });

    const totalJobs = await prisma.job.count({
      where: { userId: user.id },
    });

    res.status(200).json({
      jobs,
      totalJobs,
      totalPages: Math.ceil(totalJobs / limitInt),
      currentPage: pageInt,
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', details: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID
app.get('/api/jobs/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const job = await prisma.job.findUnique({
      where: { id: parseInt(id) },
      include: {
        city: true,
      },
    });

    if (!job) {
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.status(200).json(job);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è', details: error.message });
  }
});

app.get('/api/user/:clerkUserId', async (req, res) => {
  const { clerkUserId } = req.params;

  try {
    const user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å clerkUserId ${clerkUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.status(200).json(user);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', details: error.message });
  }
});

// –ü–æ–¥–Ω—è—Ç–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤–≤–µ—Ä—Ö
app.post('/api/jobs/:id/boost', async (req, res) => {
  const { id } = req.params;
  console.log(`[Boost] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–Ω—è—Ç–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: ${id}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const job = await prisma.job.findUnique({
      where: { id: parseInt(id) },
      include: { user: true },
    });

    if (!job) {
      console.error(`[Boost] –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const ONE_DAY = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const now = new Date();
    const user = job.user;

    if (!user) {
      console.error(`[Boost] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –ø–æ–¥–Ω—è—Ç–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä (–¥–∞–∂–µ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–º–∏—É–º)
    if (job.boostedAt) {
      const lastBoostTime = new Date(job.boostedAt);
      const timeSinceBoost = now - lastBoostTime;

      if (timeSinceBoost < ONE_DAY) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        const timeLeft = ONE_DAY - timeSinceBoost;
        const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
        const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));

        console.warn(`[Boost] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—É—Ç–æ–∫. –û—Å—Ç–∞–ª–æ—Å—å ${hoursLeft}—á ${minutesLeft}–º.`);
        return res.status(400).json({ 
          error: `–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–Ω—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ ${hoursLeft} —á ${minutesLeft} –º.` 
        });
      }
    }

    // üî• –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ –∏–ª–∏ –ø—Ä–µ–º–∏—É–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –∫—É–ø–ª–µ–Ω ‚Äì –ø–æ–¥–Ω–∏–º–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    const boostedJob = await prisma.job.update({
      where: { id: parseInt(id) },
      data: { boostedAt: now },
    });

    console.log(`[Boost] –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç–æ:`, boostedJob);
    res.status(200).json(boostedJob);
  } catch (error) {
    console.error('[Boost] –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–Ω—è—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏', details: error.message });
  }
});





app.get('/api/test-cron', async (req, res) => {
  try {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...");
    await checkLowRankedJobs();
    res.status(200).json({ message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ cron-–∑–∞–¥–∞—á–∏', details: error.message });
  }
});




