import stripe from '../utils/stripe.js';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export const createCheckoutSession = async (req, res) => {
  const { clerkUserId } = req.body;

  try {
    // üîπ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    const user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user || !user.email) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email' });
    }

    // üîπ –°–æ–∑–¥–∞–µ–º Stripe Checkout Session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      mode: 'subscription',
      customer_email: user.email, // –¢–µ–ø–µ—Ä—å email –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ë–î
      line_items: [
        {
          price: 'price_1Qt63NCOLiDbHvw13PRhpenX', // –¢–≤–æ–π Price ID –∏–∑ Stripe
          quantity: 1,
        },
      ],
      success_url: 'http://localhost:3000/success?session_id={CHECKOUT_SESSION_ID}',
      cancel_url: 'http://localhost:3000/cancel',
      metadata: { clerkUserId },
    });

    res.json({ url: session.url });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Checkout Session:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏' });
  }
};

export const activatePremium = async (req, res) => {
  const { sessionId, clerkUserId } = req.body;

  try {
    const session = await stripe.checkout.sessions.retrieve(sessionId);

    if (session.payment_status === 'paid') {
      await prisma.user.update({
        where: { clerkUserId },
        data: {
          isPremium: true,
          premiumEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        },
      });

      res.json({ success: true });
    } else {
      res.status(400).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞' });
  }
};
