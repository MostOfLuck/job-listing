import PropTypes from 'prop-types';
import Select from 'react-select';
import Skeleton from 'react-loading-skeleton';
import { useTranslation } from "react-i18next";

export const JobFormFields = ({ register, errors, setValue, selectedCityId, cities, loading }) => {
  const { t } = useTranslation();

  // ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
  console.log("üìå –ì–æ—Ä–æ–¥–∞ –≤ JobFormFields:", cities);
  console.log("üìå –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ ID:", selectedCityId);

  // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç [{ value, label }]
  const cityOptions = cities.map(city => ({
    value: city.id, // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å `id`
    label: city.name // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å `name`
  }));

  return (
    <>
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ */}
      <div className="mb-4">
        <label htmlFor="title" className="block text-gray-700 mb-2">
          {t('job_title')}
        </label>
        <input
          id="title"
          type="text"
          {...register('title')}
          className={`bg-white w-full border px-3 py-2 rounded ${
            errors.title ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder={t('write_job_title')}
        />
        {errors.title && <p className="text-red-500 text-sm mt-1">{errors.title.message}</p>}
      </div>

      {/* –ó–∞—Ä–ø–ª–∞—Ç–∞ */}
      <div className="mb-4">
        <label htmlFor="salary" className="block text-gray-700 mb-2">
          {t('salary_per_hour')}
        </label>
        <input
          id="salary"
          type="text"
          {...register('salary')}
          className={`bg-white w-full border px-3 py-2 rounded ${
            errors.salary ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder={t('write_salary')}
        />
        {errors.salary && <p className="text-red-500 text-sm mt-1">{errors.salary.message}</p>}
      </div>

      {/* –ì–æ—Ä–æ–¥ */}
      <div className="mb-4">
        <label htmlFor="cityId" className="block text-gray-700 mb-2">
          {t('location')}
        </label>
        {loading ? (
          <Skeleton height={40} />
        ) : (
          <Select
            options={cityOptions} // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            value={cityOptions.find(city => city.value === selectedCityId) || null}
            onChange={(option) => setValue('cityId', option?.value)}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
            classNamePrefix="react-select"
            isClearable
          />
        )}
        {errors.cityId && <p className="text-red-500 text-sm mt-1">{errors.cityId.message}</p>}
      </div>

      {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
      <div className="mb-4">
        <label htmlFor="phone" className="block text-gray-700 mb-2">
          {t('phone_number')}
        </label>
        <input
          id="phone"
          type="text"
          {...register('phone')}
          className={`bg-white w-full border px-3 py-2 rounded ${
            errors.phone ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder={t('write_phone_number')}
        />
        {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone.message}</p>}
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <div className="mb-4">
        <label htmlFor="description" className="block text-gray-700 mb-2">
          {t('description')}
        </label>
        <textarea
          id="description"
          {...register('description')}
          className={`bg-white w-full border px-3 py-2 rounded ${
            errors.description ? 'border-red-500' : 'border-gray-300'
          }`}
          rows="5"
          placeholder={t('write_job_description')}
        />
        {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description.message}</p>}
      </div>
    </>
  );
};

// **–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—Å–æ–≤**
JobFormFields.propTypes = {
  register: PropTypes.func.isRequired,
  errors: PropTypes.object.isRequired,
  setValue: PropTypes.func.isRequired,
  selectedCityId: PropTypes.number,
  cities: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.number.isRequired, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º `id`
      name: PropTypes.string.isRequired, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º `name`
    })
  ).isRequired,
  loading: PropTypes.bool.isRequired,
};

export default JobFormFields;
